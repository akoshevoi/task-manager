export const createUserWithEmailAndPassword = (email, password) => {
  return firebaseApp
    .auth()
    .createUserWithEmailAndPassword(email, password)
    .then(async ({ user }) => user);
};

export const saveUserById = async (id, data) => {
  try {
    const doc = db.collection(COLLECTION_NAME).doc(id);
    await doc.set(data);
    return;
  } catch (err) {
    console.error(err);
  }
};

import { useEffect } from 'react';
import PropTypes from 'prop-types';
import { initAmplitude } from '../../amplitude';
import { useLocation } from 'react-router';
import firebaseApp from '../../firebaseConfig';
import {
  SET_USER,
  SET_AVAILABLE_PRODUCTS,
  useGlobalState,
  SET_COMPANY,
} from '../../hooks/useGlobalState';
import { getCompanyById, getUserById, getAvailableProducts } from '../../api';
import { withRouter } from 'react-router';
export const Auth = ({ setIsLoaded, setAuth, history }) => {
  const location = useLocation();
  const [, dispatch] = useGlobalState();
  useEffect(() => {
    const unsubscribe = firebaseApp.auth().onAuthStateChanged(async u => {
      if (!u) {
        setAuth(false);
        setIsLoaded(true);
        return;
      }
      const emailVerified = u.emailVerified;
      const user = await getUserById(u.uid);
      if (!user) {
        setIsLoaded(true);
        setAuth(false);
        return;
      }
      const userCompany = await getCompanyById(user.company_id);
      const available_products = await getAvailableProducts(
        userCompany.available_products,
      );
      dispatch({ type: SET_AVAILABLE_PRODUCTS, payload: available_products });
      const userId = user ? user.uid : null;
      initAmplitude(userId);
      dispatch({
        type: SET_USER,
        payload: { ...user, emailVerified },
      });
      dispatch({ type: SET_COMPANY, payload: userCompany });
      setIsLoaded(true);
      setAuth(true);
    });
    return () => {
      unsubscribe();
    };
  }, [dispatch, history, location, setIsLoaded, setAuth]);
  return null;
};
Auth.propTypes = {
  setIsLoaded: PropTypes.func.isRequired,
  setAuth: PropTypes.func.isRequired,
  history: PropTypes.object.isRequired,
};
export default withRouter(Auth);



import React, { useEffect, useState } from 'react';
import { Route, Switch } from 'react-router-dom';
import Welcome from './containers/Welcome';
import LandingPage from './containers/LandingPage';
import Dashboard from './containers/Dashboard';
import CoachFinder from './containers/CoachFinder';
import Leadership from './containers/Leadership';
import Projects from './containers/Projects';
import Imprint from './containers/Imprint';
import PrivacyPolicy from './containers/PrivacyPolicy';
import ConfirmRegistration from './containers/ConfirmRegistration';
import ModeratorFinder from './containers/ModeratorFinder';
import Settings from './containers/Settings';
import AdminDashboard from './containers/AdminDashboard';
import AdminCompanies from './containers/AdminCompanies';
import AdminCompany from './containers/AdminCompany';
import AdminCompaniesNew from './containers/AdminCompaniesNew';
import AdminProducts from './containers/AdminProducts';
import AdminProduct from './containers/AdminProduct';
import AdminProductsNew from './containers/AdminProductsNew';
import Project from './containers/Project';
import SignOut from './containers/SignOut';
import Auth from './containers/Auth';
import { useGlobalState } from './hooks/useGlobalState';
import { getAllProjects } from './api';
import PagePath from './constants/PagePath';
import ScrollToTop from './components/ScrollToTop';
import Loader from './components/Loader';
import { getLink } from './utils';
import VisitorRedirects from './components/VisitorRedirects';
import UserRedirects from './components/UserRedirects';
import Translation from './containers/Translation';
const App = () => {
  const [{ user, company }, dispatch] = useGlobalState();
  const [isLoaded, setIsLoaded] = useState(false);
  const [isAuth, setAuth] = useState(false);
  useEffect(() => {
    if (user && user.uid) {
      getAllProjects(dispatch, user.uid);
    }
  }, [dispatch, user]);
  return (
    <Route>
      <ScrollToTop />
      <Auth setIsLoaded={setIsLoaded} setAuth={setAuth} />
      <Loader show={!isLoaded} />
      <Translation />
      {isLoaded && (
        <Switch>
          <Route exact path={PagePath.LANDING_PAGE} component={LandingPage} />
          <Route exact path={PagePath.SIGNOUT} component={SignOut} />
          <Route
            path={getLink(company, PagePath.ANMELDEN)}
            component={Welcome}
          />
          <Route path={PagePath.IMPRINT} component={Imprint} />
          <Route path={PagePath.PRIVACY_POLICY} component={PrivacyPolicy} />
          <Route
            path={getLink(company, PagePath.SETTINGS)}
            component={Settings}
          />
          {isAuth && (
            <Switch>
              <Route
                path={getLink(company, PagePath.DASHBOARD)}
                component={Dashboard}
              />
              <Route
                path={getLink(company, PagePath.COACH_FINDER)}
                component={CoachFinder}
              />
              <Route
                path={getLink(company, PagePath.SELFCOACHING)}
                component={Leadership}
              />
              <Route
                path={getLink(company, PagePath.PROJECTS)}
                component={Projects}
              />
              <Route
                path={getLink(company, PagePath.MODERATOR_FINDEN)}
                component={ModeratorFinder}
              />
              <Route
                path={getLink(company, PagePath.ADMIN_DASHBOARD)}
                component={AdminDashboard}
              />
              <Route
                exact
                path={getLink(company, PagePath.ADMIN_COMPANIES)}
                component={AdminCompanies}
              />
              <Route
                exact
                path={getLink(company, PagePath.ADMIN_COMPANIES_NEW)}
                component={AdminCompaniesNew}
              />
              <Route
                exact
                path={getLink(company, PagePath.ADMIN_COMPANY)}
                component={AdminCompany}
              />
              <Route
                exact
                path={getLink(company, PagePath.ADMIN_PRODUCTS)}
                component={AdminProducts}
              />
              <Route
                path={getLink(company, PagePath.ADMIN_PRODUCTS_NEW)}
                component={AdminProductsNew}
              />
              <Route
                path={getLink(company, PagePath.ADMIN_PRODUCT)}
                component={AdminProduct}
              />
              <Route
                path={getLink(company, `${PagePath.PROJECT}/:id`)}
                component={Project}
              />
              <Route
                path={PagePath.ANMELDEN_WITH_COMPANY}
                component={UserRedirects}
              />
            </Switch>
          )}
          <Route
            path={PagePath.CONFIRM_REGISTRATION}
            component={ConfirmRegistration}
          />
          <Route
            path={PagePath.ANMELDEN_WITH_COMPANY}
            component={VisitorRedirects}
          />
        </Switch>
      )}
    </Route>
  );
};
export default App;
